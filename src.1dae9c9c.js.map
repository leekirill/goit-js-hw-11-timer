{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","start","setInterval","currentTime","Date","now","countDownTime","remainingTime","getTimeComponents","updateValue","value","String","padStart","days","hours","mins","secs","clock","document","querySelector","daysValue","hoursValue","minsValue","secsValue","textContent","time","pad","Math","floor","timer","timer2"],"mappings":";AA0GA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA1GMA,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC/BD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,QAsGT,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAnGU,MAAA,WAAA,IAAA,EAAA,KACNC,YAAY,WACJC,IAAAA,EAAcC,KAAKC,MACnBC,EAAgB,EAAKN,WAAaG,EAClCI,EAAgB,EAAKC,kBAAkBF,GAC7C,EAAKG,YAAYF,IAChB,OA6FP,CAAA,IAAA,MA1FMG,MAAAA,SAAAA,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAyFrC,CAAA,IAAA,cAtF2C,MAAA,SAAA,GAA3BC,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACzBC,EAAQC,SAASC,cAAc,KAAKpB,UACpCqB,EAAYH,EAAME,cAAc,2BAChCE,EAAaJ,EAAME,cAAc,4BACjCG,EAAYL,EAAME,cAAc,2BAChCI,EAAYN,EAAME,cAAc,2BAEtCC,EAAUI,YAAiBX,GAAAA,OAAAA,GAC3BQ,EAAWG,YAAiBV,GAAAA,OAAAA,GAC5BQ,EAAUE,YAAiBT,GAAAA,OAAAA,GAC3BQ,EAAUC,YAAiBR,GAAAA,OAAAA,KA4E/B,CAAA,IAAA,oBAzEoBS,MAAAA,SAAAA,GAQT,MAAA,CAAEZ,KAPI,KAAKa,IAAIC,KAAKC,MAAMH,EAAQ,QAO1BX,MAND,KAAKY,IACjBC,KAAKC,MAAOH,EAAQ,MAAyB,OAKzBV,KAHT,KAAKW,IAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAGlCT,KAFf,KAAKU,IAAIC,KAAKC,MAAOH,EAAQ,IAAc,WAmE5D,EA1GM3B,GA6CA+B,EAAQ,IAAI/B,EAAe,CAC/BC,SAAU,WACVC,WAAY,IAAII,KAAK,oBAGjB0B,EAAS,IAAIhC,EAAe,CAChCC,SAAU,WACVC,WAAY,IAAII,KAAK","file":"src.1dae9c9c.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.start();\n  }\n\n  start() {\n    setInterval(() => {\n      const currentTime = Date.now();\n      const countDownTime = this.targetDate - currentTime;\n      const remainingTime = this.getTimeComponents(countDownTime);\n      this.updateValue(remainingTime);\n    }, 1000);\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  updateValue({ days, hours, mins, secs }) {\n    const clock = document.querySelector(this.selector);\n    const daysValue = clock.querySelector('span[data-value=\"days\"]');\n    const hoursValue = clock.querySelector('span[data-value=\"hours\"]');\n    const minsValue = clock.querySelector('span[data-value=\"mins\"]');\n    const secsValue = clock.querySelector('span[data-value=\"secs\"]');\n\n    daysValue.textContent = `${days}`;\n    hoursValue.textContent = `${hours}`;\n    minsValue.textContent = `${mins}`;\n    secsValue.textContent = `${secs}`;\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Junary 2, 2022'),\n});\n\nconst timer2 = new CountdownTimer({\n  selector: '#timer-2',\n  targetDate: new Date('Junary 2, 2021'),\n});\n\n// class CountdownTimer {\n//     constructor({selector, targetDate}) {\n//         this.selector = selector;\n//         this.targetDate = targetDate;\n//         this.start();\n//     }\n\n//     start() {\n//         setInterval(() => {\n//             const currentTime = Date.now();\n//             const deltaTime = this.targetDate - currentTime;\n//             const remainingTime = this.getTimeComponents(deltaTime);\n//             this.updateClockFace(remainingTime);\n\n//         }, 1000)\n//     }\n//     pad(value) {\n//         return String(value).padStart(2, '0');\n//     }\n\n//     getTimeComponents(time) {\n//     const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//     const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//     const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//     const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n//         return { days, hours, mins, secs };\n//     }\n\n//     updateClockFace({ days, hours, mins, secs }) {\n//         const clock = document.querySelector(this.selector);\n//         const daysCount = clock.querySelector('span[data-value=\"days\"]');\n//         const hoursCount = clock.querySelector('span[data-value=\"hours\"]');\n//         const minsCount = clock.querySelector('span[data-value=\"mins\"]');\n//         const secsCount = clock.querySelector('span[data-value=\"secs\"]');\n\n//         daysCount.textContent = `${days}`;\n//         hoursCount.textContent = `${hours}`;\n//         minsCount.textContent = `${mins}`;\n//         secsCount.textContent = `${secs}`;\n//     }\n\n// }\n\n// const timer = new CountdownTimer({\n//   selector: '#timer-1',\n//   targetDate: new Date('Nov 17, 2020'),\n// });\n\n// const timer2 =new CountdownTimer({\n//   selector: '#timer-2',\n//   targetDate: new Date('Nov 17, 2022')\n// })\n"]}